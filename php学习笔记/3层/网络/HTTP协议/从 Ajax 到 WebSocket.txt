Ajax
为了解决这个问题，诞生了 Ajax 技术，其全称是 Asynchronous JavaScript And XML，即异步 Javascript 与 XML 技术，它是一种可以有效利用 JavaScript 与 DOM 操作，实现 Web 页面局部刷新，而不用重新加载页面的异步通信技术。其核心技术是一个名为 XMLHttpRequest 的 API， 通过 JavaScript 的调用就可以实现与服务器的通信，以便在已加载成功的页面发起请求，再通过 DOM 操作实现页面的局部刷新，在早期返回的数据格式是 XML，但是随着更加轻量级的 JSON 出现，现在 Ajax 调用多返回 JSON 格式数据，与返回完整 HTML 文档不同，局部刷新返回的数据体量更小。

WebSocket 
 无论服务端还是客户端 WebSocket 都是通过事件驱动的.
WebSocket 本来是作为 HTML5 的一部分，而现在却变成了一个独立的协议，它是 Web 客户端与服务器之间实现全双工通信的标准。一旦客户端与服务器之间建立起了基于 WebSocket 协议的通信连接，之后所有的通信都依靠这个协议进行，双方可以互相发送 JSON、XML、HTML、图片等任意格式的数据。由于 WebSocket 是基于 HTTP 协议的，所以连接的发起方还是客户端，而一旦建立起 WebSocket 连接，不论是服务器还是客户端，都可以直接向对方发送报文

为了实现 WebSocket 的通信，在 HTTP 连接建立之后，还需要完成一次「握手」的步骤：

1）请求阶段
WebSocket 复用了 HTTP 的握手通道，要建立 WebSocket 通信，需要在连接发起方的 HTTP 请求报文中通过 Upgrade 字段告知服务器通信协议升级到 Websocket，然后通过 Sec-WebSocket-* 扩展字段提供 WebSocket 的协议、版本、键值等信息：
Sec-WebSocket-Extensions 
Sec-WebSocket-Key
Sec-WebSocket-Version 

2）响应阶段
对于上述握手请求，服务器会返回 101 Switching Protocols 响应表示协议升级成功：
响应头中 Sec-WebSocket-Accept 字段的值是根据请求头中 Sec-WebSocket-Key 的字段值生成的，两者结合起来用于防止恶意连接和意外连接。

SecWebsocketAccept=Base64(SHA1(SecWebsocketKey+GUID))