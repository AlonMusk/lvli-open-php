Nginx是Master-Worker进程模型。
Nginx是异步非阻塞
在 Linux 下，Nginx 使用 epoll 的 I/O 多路复用模型，每个worker可以同时处理多个client请求

Master进程：主进程，监视worker进程。
Worker进程：工作进程，做相应的工作。

https://www.runoob.com/w3cnote/nginx-proxy-balancing.html

一般情况下，Nginx服务启动的用户是Nobody

修改nginx的用户和用户组：
1、添加 nginx 用户
useradd -s /sbin/nologin -M nginx
2、更改 Nginx 配置文件 vim /usr/local/nginx/conf/nginx.conf
3、重新加载nginx 并且 验证是否生效

配置：
#user administrator administrators;  #配置用户或者组，默认为nobody nobody。

worker_processes  1;  //允许生成的作子进程 一般设置为CPU数 * 核数
events {
   use epoll;    # 默认使用epoll
   worker_connections  1024;   # 每个worker允许连接的最大数
}
#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址
error_log log/error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg
events {
    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on
    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off
    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport
    worker_connections  1024;    #最大连接数，默认为512
}
http {
    include       mime.types;   #文件扩展名与文件类型映射表
    default_type  application/octet-stream; #默认文件类型，默认为text/plain
    #access_log off; #取消服务日志    
    log_format myFormat '$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for'; #自定义格式
    access_log log/access.log myFormat;  #combined为日志格式的默认值
    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。
    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。
    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。

    upstream mysvr {     //写一组被代理的服务器地址，然后配置负载均衡的算法。这
      server 127.0.0.1:7878;
      server 192.168.10.121:3333 backup;  #热备
    }
    error_page 404 https://www.baidu.com; #错误页
    server {
        keepalive_requests 120; #单连接请求上限次数。
        listen       4545;   #监听端口
        server_name  127.0.0.1;   #监听地址       
        location  ~*^.+$ {       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。
           #root path;  #根目录
           #index vv.txt;  #设置默认页
           proxy_pass  http://mysvr;  #请求转向 mysvr 定义的服务器列表
           deny 127.0.0.1;  #拒绝的ip
           allow 172.18.5.54; #允许的ip           
        } 
    }
}



变量              含义
$bytes_sent  发送给客户端的总字节数

$body_bytes_sent  发送给客户端的字节数，不包括响应头的大小

$connection   连接序列号

$connection_requests  当前通过连接发出的请求数量

$http_referer  请求的referer地址。

$http_host 请求地址，即浏览器中你输入的地址（IP或域名） www.it300.com

$http_user_agent  客户端浏览器信息。

$http_x_forwarded_for  当前端有代理服务器时，设置web节点记录客户端地址的配置，此参数生效的前提是代理服务器也要进行相关的x_forwarded_for设置。

$msec   日志写入时间，单位为秒，精度是毫秒

$pipe   如果请求是通过http流水线发送，则其值为"p"，否则为“."

$request_length   请求长度（包括请求行，请求头和请求体）

$request_time  请求处理时长，单位为秒，精度为毫秒，从读入客户端的第一个字节开始，直到把最后一个字符发送张客户端进行日志写入为止

$request  完整的原始请求行，如 "GET / HTTP/1.1"

$remote_user  客户端用户名称，针对启用了用户认证的请求

$request_uri  完整的请求地址，如 "https://daojia.com/"

$remote_addr 与 $http_x_forwarded_for 用以记录客户端的ip地址；

$ssl_protocol：SSL协议版本，比如TLSv1。

$ssl_cipher：交换数据中的算法，比如RC4-SHA。

$status  响应状态码

$server_name：虚拟主机名称。

$time_iso8601  标准格式的本地时间,形如“2017-05-24T18:31:27+08:00”

$time_local   通用日志格式下的本地时间，如"24/May/2017:18:31:27 +0800"

-：空白，用一个“-”占位符替代，历史原因导致还存在。

$upstream_status   upstream状态  200

$upstream_addr：upstream的地址，即真正提供服务的主机地址。

$upstream_response_time：请求过程中，upstream的响应时间。



从Nginx向后端（php-cgi)建立连接开始到接受完数据然后关闭连接为止的时间



nginx -s reload    重新加载配置文件
一般nginx的服务器的响应会迟缓，可以多刷新几次。重新加载配置文件的命令应该在nginx启动的情况下执行。
nginx -s stop   强制停止nginx服务器
nginx -s quit   优雅的停止nginx服务器（处理完所有的请求之后）
nginx -s reopen 重启nginx服务器
killall nginx   杀死所有nginx进程
nginx -t        检测nginx配置文件是否有语法错误

惊群现象：一个网路连接到来，多个睡眠的进程被同时叫醒，但只有一个进程能获得链接，这样会影响系统性能。


X-Forwarded-For: client, proxy1, proxy2  //用来表示 HTTP 请求端真实 IP

X-Real-IP 通常被 HTTP 代理用来表示与它产生 TCP 连接的设备 IP，这个设备可能是其他代理，也可能是真正的请求端。需要注意的是，X-Real-IP 目前并不属于任何标准，代理和 Web 应用之间可以约定用任何自定义头来传递这个信息。

结论:
1、直接对外提供服务的 Web 应用，在进行与安全有关的操作时，只能通过 Remote Address 获取 IP(php 是 $_SERVER["REMOTE_ADDR"])，不能相信任何请求头；
2、使用 Nginx 等 Web Server 进行反向代理的 Web 应用，在配置正确的前提下，要用 X-Forwarded-For 最后一节 或 X-Real-IP 来获取 IP（因为 Remote Address 得到的是 Nginx 所在服务器的内网 IP）；同时还应该禁止 Web 应用直接对外提供服务；
3、在与安全无关的场景，例如通过 IP 显示所在地天气，可以从 X-Forwarded-For 靠前的位置获取 IP，但是需要校验 IP 格式合法性；


想检查一个配置文件是否正确（检查所有站点的配置）
nginx -t -c /etc/nginx/nginx.conf




		