unix和linux的区别


Unix的历史起始于二十世纪六十年代的AT&T贝尔实验室.有两位最知名的人物，ken Thompson和Dennis Ritchie。，Ken Thompson的Unix哲学成为了模块化软件设计和计算的强有力的典范.由于Unix是围绕着文件和管道设计的，这个"piping（管道)“模型至今仍然很流行，它把程序的输入和输出链接在一起作为一系列的线性输入操作。
通过在伯克利的Unix的所有活动，一个新的Unix软件支付诞生了：伯克利软件发行版，或者叫BSD。最初，BSD并不是AT&T的Unix的代替品，而是附加软件和功能附加品。

此外，在最近的历史中，每一个苹果Mac硬件单元搭载的系统都可以被称为BSD，因为它的OS X（现在的macOS）操作系统是一个BSD-派生

Richard Stallman希望创建一个作为替代私有Unix系统的真正免费的和开源的系统。他正在以GNU的名义开发实用工具和程序，这是一种递归算法，意思是“GNU不是Unix！” 虽然它有一个内核项目正在进行，但结果证实开展起来很困难，这样没有内核，免费并开源操作系统的梦想就无法实现。
这是Linus Torvald的工作 - 编写出一种可工作的和可行的内核，被他称为Linux--整个操作系统因此而诞生。鉴于Linus使用的是多种GNU工具（例如GNU编译器集合或GCC），GNU工具和Linux内核的结合是天生的绝配。
Linux发行版使用GNU提供的组件、Linux内核，MIT的X-Windows GUI以及其他可以在开源BSD许可下使用的BSD组件来实现。像Slackware和Red Hat这样的发行版的早期流行给了上世纪90年代的“普通PC用户”使用Linux操作系统的机会，以及他们在工作或学术生活中使用的许多专有的Unix系统功能和实用工具。

目前为止，我们已经了解了Unix的历史，和Linux的崛起，以及与Unix不同的以免费和开源为基础的GNU/Free软件基金会。

posix:  由IEEE 和ISO/IEC 开发的一簇标准
system v:它最初由 AT&T 开发

信号量

线程同步：
互斥量

(共享内存)三种无关进程间的三种共享内存区域技术： systemV 共享内存  共享文件映射  POSIX 共享内存对象

通信、同步（信号量<system V信号量 POSIX信号量>） 、信号相关概念可以查看截图
通信工具： 数据传输（字节流<管道 FIFO 流socket> 伪终端 消息<systemV消息队列  POSIX消息队列  数据报socket>）  共享内存（ systemV 共享内存  内存映射  POSIX 共享内存）
同步工具：信号量 文件锁 互斥体  条件变量
信号：（标准信号 实时信号）



常规文件I/O以外，3中可选的I/O模型：
I/O 多路复用（select()以及 poll()系统调用）。
信号驱动 I/O。
Linux 专有的 epoll 编程接口
（libevent）

5种IO模型  阻塞IO、非阻塞IO、信号驱动IO、IO多路复用、异步IO。前4个被称为同步io
Redis: IO多路复用是经典的Reactor设计模式，有时也称为异步阻塞IO（异步指socket为non-blocking，堵塞指select堵塞），为常见的四种IO模型之一，其他三种分别是：同步堵塞IO、同步非堵塞IO、异步（非堵塞）IO。

两种文件描述符准备就绪的通知模式。
1.水平触发通知：如果文件描述符上可以非阻塞地执行 I/O 系统调用，此时认为它已经
就绪。
2.边缘触发通知：如果文件描述符自上次状态检查以来有了新的 I/O 活动（比如新的输
入），此时需要触发通知
