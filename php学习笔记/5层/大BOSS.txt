意义：  更有价值地出售时间

首先这个逻辑是脱离语言的。
那就是可以通过后台来设置规则，自动生成代码。那么技术难点在哪里呢。

这里面的是B端。现在还没有去想A和C两方的情况。

逻辑 和代码之间的转换。
比如要实现一个平级复购订单奖等等逻辑，仅仅是sql语句的生成是没有多大问题的。但是逻辑如果要实现为代码。
这里面的鸿沟是什么呢。

我已经将底层的数据切割开来了，可以这么说。其实也不一定就是就是这个数据，也是某种底层的逻辑封装。如果要实现这个逻辑到代码的实现，首先是要知道某种语言的代码规范，然后按照特定语言的代码规范，比如使用类，变量这些来做了。

那将问题继续切割，逻辑转换为PHP语言。特定语言也会不断更新，需要实时跟踪语言的新特性。怎么转换。
首先是要知道选用什么哪个版本的主流框架。这样一来，就全乱了。因为框架这个东西，维护者也在不断更新，是不可靠的。就要做自己的框架了。就是要开发一个自己的PHP开发框架。

然后就是根据规则选用是哪个容器或者微服务，接着不是模块，因为所有的代码会重新生成。要写自己的代码生成器。在特定的容器或者微服务重新生成。这个生成是综合性生成的。要根据情况来创建类，创建变量，写方法。  

比如这个平级复购订单奖。已经在后台配置好了规则。那么现在这个代码怎么写呢。如果参考了laravel的框架思想，那么可以使用链式操作来操作获取数据。

配置的规则是这样的：
在平级时，判断第二次购买，有就算奖励，不重复计算。

在规则设置的时候，还有一些隐性的规则存在，比如上面这一条，就有时间方面的。是在平级时的时间和购买时间有限制。

那么代码的生成，就是写一个方法。

判断是否平级并且没有计算过，如果是，就判断是否是第二次购买。有就获取补货款和奖励比例，计算奖励。计算完。返回。

我觉得问题反而不大了。因为后台可以由程序员来设置。接着就是要有一个预生成机制，就是有可能规则之间会有冲突。这个时候，就要显示有冲突，提示重新修改。

接下来的问题就是高并发的问题。
因为节点的分散，要实现高并发问题，怎么处理？首先就是这个代码理解语义的问题，这个规则我们自己制定好就可以了。

至于代码规范方面，是可以做到在相关节点，让生成的代码自动拆分成多个方法和多个文件的。这个是针对语言来编程了。不同的语言可以编写不同的方法论。

然后就是这个高并发，就是系统的性能方面。我觉得有个问题，是需要知道的。就是  分模块，分容器，其他需要的东西可以通过接口向外界请求实现。如果模块比较多，可以参考目前现有的分布式高并发方案，如果确实要求太高，那就所有的容器都放置在同一台服务器就好了。

这个系统是有一个不断发展的过程，我感觉涉及到的东西过于庞大， 并不是一蹴而就的东西。但是目前这个系统最复杂的就是这个逻辑转换为代码的过程，已经解决了。

需要有一个专业的程序员，在后台设置合适的规则，然后就是可以实现整套系统需要的东西。

但是这个逻辑的代码转换，再想想，因为我刚才在做的就是一个程序员在理解的过程。如果要机器可以做到。怎么做？会不会有未知的技术难点？目前就是要在规则的理解方面，做很多的工作。并且好像有点难一步到位，需要不断地去丰富才行的。这样的话，在语义规则的理解方面，要花大功夫。因为是不可能每遇到一种情景，就来丰富一下的。是需要实现真正的抽象化才行。 
	感觉有点难。只能不断去补充了。还有一个难点，就是规则之间的关联性。优先级。好像这个比较好处理。不是想象中的那么难。反而是这个规则可能有点多，并且很多的情况是需要理解的（比如放到队列处理，队列处理完，要干什么。其实就是一种编程了。只不过是把编程的工作放到了一个大后台进行了。）
	
	
	那最终开发出来的这款自动生成电商系统，就变成了一个超级程序员在后台进行一个人编程了。
	
	这个系统开发出来的好处，就是什么呢。我可以拿多几份工资，挣更多的钱。可以更好地出售自己的时间。帮助更多的人创业了
	
	但是如果是要优化SEO呢。这个是要对搜索引擎熟悉而已。在规则设置的时候，要巧妙些。
	编程只不过简化了很多。
	
	
现在再来一个场景，就是我要做这个心跳。针对php的。这个也是规则。在做过了这个心跳的编码之后，
这个超级程序员，要先理解什么呢，就是需求。这个心跳的需求，是一种前后端进行信息交互而已。是直接实现的。如果要细分的，可以在后续丰富心跳的自定义。

编码变多了而已。好像跟整个系统没什么关系。

那后续的代码优化，怎么做。还有测试。我觉得可以部分测试，这块也要上去。

这套系统就相当于一个工厂，最终会生产出真实需要的系统。	
	
那再想想如果换一种语言呢。比如JAVA。这个也是一样的。首先要自己做一套框架。比如参考主流的，可能也不能参考。因为场景不一样， 比如做一个论坛。技术重点在哪里，我好像并不知道哎。但是我知道的就是市场上有的一个cms有点复杂。

编程多点不怕。就是逻辑一定要清晰。
这个是否可以实现。最终实现的样子会是什么样的。其实就是一个超级的赛亚人。一个超级程序员，可以做了产品经理，多个程序员，测试和运维做的工作。

我觉得论坛的实时性，可能会强一点？还是这个版块的消息更新要快些。消息更新要快，需要干什么就是要懂得相关的技术呀。还有模板这种东西。是涉及前端那块的。先不管。


好像就是这些了。就是这个编程这块的思维可能要发生变化， 以后要变成在后台开发。通过设置规则。就相当于一个辅助工具。辅助超级赛亚人去快速开发一套系统。

而框架这块，也是要处理好的。这个框架是自己组织的。要脱离于任何的框架。如果后面，自己的框架发生变动。也是需要自己去维护的。所以需要熟悉很多的框架思想，将他们的优点整合进自己的框架当中。

所以这套东西本质就变成这样了。

好了。现在这个B已经解决了，那么接下来看这个A。操作界面。
目前对前端，不是很熟。是否可以通过拖拽来编程？实现层次和相对位置。但是复杂点的js可能就有点难了。是要自己实现的。因为这个是交互了。  另外还有现在出现的各种前端技术，也要有一定的熟悉。比如小程序。APP的安卓开发和苹果的开发。目前也就是这些。所以我觉得对于前端来讲，也是一个辅助工具而已。并且实现这个，需要对JS非常的熟悉。

下面讨论一下这个C。C涉及到数据库，这个各种数据库的存储，其实也是一种选择。选择什么样的数据库，是超级赛亚人自己选择的。
如果要机器自己选择，需要在超级后台添加一个数据库配置版块。


另外，这个适配器是需要自己写。

ok 那首先整体的框架，定了没。然后从哪里开始切入来做？
1、就是分为ABC三段。然后前端使用拖拽的方式来做。适配器来适配微信小程序、APP等端
2、后端，是通过一个超级管理员后台，编辑规则编程，来做逻辑转为代码的工作。
3、C也就是数据库，通过适配器来做。适配各种数据库的连接和查询语句。
4、后端框架自己写。前端框架也是自己写。
5、性能和高并发方面，使用分布式，微服务和容器技术。涉及到组件化开发。
6、涉及到的扩展呢。比如PHP语言下的swoole扩展
7、除非是必要的，就重新造轮子。否则就先借用市场上已有的扩展和组件。
8、分模块。就是分节点。根据不同的维度进行节点的细分。然后在这个基础上，可以自动做模块的划分。那么节点是什么呢，根据什么来不断细分呢。
节点是对B的抽象化处理
节点是对功能点的抽象化。
节点本身存在父子关系和级别。
节点本身对外提供服务。对内部可以是一个简单的属性。	
节点怎么实现？自动确定模块->通过容器、微服务、分布式等实现。

判断是否平级并且没有计算过，如果是，就判断是否是第二次购买。有就获取补货款和奖励比例，计算奖励。计算完。返回。	



