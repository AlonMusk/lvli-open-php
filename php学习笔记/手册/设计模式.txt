1、单一职责原则
2、里氏替换原则    "几维鸟不是鸟"  是开闭原则的补充
主要阐述了有关继承的一些原则，也就是什么时候应该使用继承，什么时候不应该使用继承，以及其中蕴含的原理。里氏替换原是继承复用的基础，它反映了基类与子类之间的关系，是对开闭原则的补充，是对实现抽象化的具体步骤的规范。通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。
3、依赖倒置原则    开发者和操作系统    类（道德）和接口（法律）  是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合。  抽象与细节之间的依赖（细节依赖于抽象）   高层模块与底层模块之间的依赖(依赖于抽象)   
4、接口隔离原则    类间的依赖关系应该建立在最小的接口上  如zhihuer的 两个接口PositiveZhiHuer，NegativeZhihuer   “职责”的粒度其实是比“隔离接口”的粒度要大的
5、迪米特原则      最少知道原则   “无效社交”  一个类只和朋友类交流
6、开闭原则        "桌面主题"  抽象约束、封装变化  通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中。


合成复用原则      同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。


接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性，体现了封装的思想，但两者是不同的：
单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。
单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建。