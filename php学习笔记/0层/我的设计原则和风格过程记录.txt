炫酷 高效 偷懒 能躺着挣钱
用一个兴趣点做为技引。小集合，

本文参考自 Robert C. Martin的Clean Code 书中的软件工程师的原则 ,适用于PHP。 这不是风格指南。 这是一个关于开发可读、可复用并且可重构的PHP软件指南。

自定义组件的封装：深入了解组件思想 和PSR-4的掌握
laravel框架有多个类组成服务，由多个服务组成组件。类 -> 服务 -> 组件
laravel使用组件化的开发模式，多个类 -> 服务 -> 组件，多个类组成服务，多个服务构成组件。
laravel 框架是使用服务组件化的开发模式开发的

大型项目架构
https://blog.csdn.net/qq_24935119/article/details/89656569?utm_medium=distribute.pc_relevant.none-task-blog-title-7&spm=1001.2101.3001.4242

如何使用service层
https://blog.csdn.net/qq_24935119/article/details/89658281

1、將PHP寫的商業邏輯寫在 service，解決 controller 肥大問題。
2、符合 SOLID 的單一職責原則 : 外部行為寫在 service 商業邏輯寫在 service，沒寫在 controller。
3、符合 SOLID 的單一職責原則 : 計算折扣與計算加總分開在不同 method，且歸屬於 OrderService，而非 OrderController。
4、符合 SOLID 的依賴反轉原則 : controller 並非直接相依於 service，而是將 service依賴注入進 controller。
5、其他 controller 也可以重複使用此段商業邏輯。

比較好的方式是使用 service :
將外部行為注入到 service。
在 service 使用外部行為。
將 service 注入到 controller。

https://blog.csdn.net/assasin0308/article/details/90675263
好的做法是把控制器中的业务逻辑提取出来，放到一个新的第三方类里面，通常，我们将这种第三方类称之为服务类，这样你就可以在所有其他控制器里面注入服务类并使用它们了。
删掉你的 models 目录了吗？还没删就赶紧删了！我们将要在 app 目录下创建一个新的目录，目录名就以我们这个应用的名字来命名，比如 QuickBill
// app
    // modules  //模块
		// product  //子模块  相当于modules层 
		   //  Service  注入到controller。
			// Extensions   对框架的扩展 
			// Exceptions 
			// Model  仅当成Eloquent class
				// Repositories  注入到service。
					-> UserRepository.php  数据访问类
					-> PaymentRepository.php
					-> XXRepository.php  //标签访问类
			// contract    //接口
				-> BillerInterface.php
			    
			// Validation  
		
			User.php  实体类（可以将数据验证方法写在这里 ）
			Payment.php

或者你也可以专门创建一个验证器类 UserValidator，放到 Validation 命名空间下，然后将这个验证器类注入到你的 Repository 类里面。

参考：
增加  Repositories层 将model 业务逻辑封装在这里
service 层将contorller 的业务逻辑封装在这里 

因为不管多复杂的应用程序都需要一个数据访问层（Repository），以及一些外部服务层等等。
PSR-4的掌握

中大型项目构架
那我们该怎么写呢？别将我们的思维局限在MVC内：
Model：仅当成Eloquent class。 將 model 依賴注入到 repository。
Repository：辅助model，处理数据库逻辑，然后注入到service。
Service：辅助controller，处理商业逻辑，然后注入到controller。
Controller：接收HTTP request，调用其他service。
Presenter：处理显示逻辑，然后注入到view。
View：使用blade将数据binding到HTML。
Repository模式，Service模式与Presenter模式。

避免连贯接口

数据验证放在哪？在哪儿进行数据验证常常困扰着开发人员。可以考虑将数据验证方法写进你的「实体」类里面（例如 User.php 和 Payment.php）。方法名可以设置为 validForCreation 或 hasValidDomain。或者你也可以专门创建一个验证器类 UserValidator，放到 Validation 命名空间下，然后将这个验证器类注入到你的 Repository 类里面。两种方式你都可以试试，看哪个你更喜欢！当然在 Laravel 5.* 中，你不需要自己创建验证器类了，通过 Laravel 自带的验证器类就可以满足你的所有需求

控制器只负责接收和响应 HTTP 请求，然后调用合适的业务逻辑层的类。你的 业务 逻辑 /领域逻辑层才是应用最核心的部分。

现在的问题是代码放哪里？分类过细了。这个度。
接口参考laravel的可以分细，但是也是根据模块来分就好。
公共的呢，把它本身当做一个模块就好啦。这个功能模块放的东西应该是整个项目都能用的。

首先导入导出，可以有多种实现方法， 那就有一个interface .
实现的类。放在公共模块。类是什么角色？是triat还是一个服务类？应该是一个服务类。

公共模块和这个Utils的区别

像支付，我觉得更应该是一个支付模块，而不是公共模块？

都可以。那么什么样的东西放在公共模块？

像图片处理，抽象出来的可以做公共模块，具体业务可以分为业务模块  日志 统计  商城？ 库存？ 支付？核心？ 订单？ 产品  活动是营销的子模块  分佣呢？（和分销是一块的）
业务也好，逻辑也好，
我觉得应该是从底层开始考虑。 就是从底层开始考虑，往上思考模块时，可以将现在和未来的业务清晰区分开来，方便开发。

从代clean code (C)的角度。
那么分模块的原则是什么呢？分模块的初衷是什么呢？ 方便管理放置代码和团队开发以及微服务的出现。

比如这样的一些模块就挺好：
订单<支付 方式 快递面单 财务支出单？账单流水>  
库存  
统计  
log日志（mysql记录 用户浏览记录 用户购买历史）  
分销（分佣）  
活动  
商品（产品） 
公共模块<跟其他模块不相关>（二维码  上传文件到第三方<图片上传方式（阿里云） 视频 文件>  导入导出（文件 excel）  ）  
user<注册（授权） 登录 找回密码  消息<公众号 IM 客服 钉钉 短信通知/邮件提醒 >     资金财务 >(包括抽象的用户和系统用户) 

如果模块过于庞大，可以将一些子模块升级为新的主模块，比如资金财务

下面的分类不太好  商城  商铺  前后台  第三方（短信 授权 支付） 
未定的分类： 微信公众号开发

消息（消息分类：短信 邮件 公众号 IM/客服  消息类型：通知 提醒 互动<聊天 咨询>  媒介：第三方<邮件 公众号 钉钉 IM> sockect ）

从代clean code (C)的角度。不应该分前后台。为什么？因为分类太笼统。因为如果这么分。那么产品这个模块就会涉及到前后台。这样的分类就不够清晰了。
那么怎么解决前后台问题，我感觉接口就可以实现了。分前台和后台接口的实现类。
上面考虑的是分模块的角度和原则。如果不分前后台，那么所有的接口和对外提供的服务。（从上来看）管理起来有点麻烦，因为这样业务会分散到各个模块里面去。


像订单 库存 统计和日志 这样分模块。有什么特点。可以针对模块进行开发。对于未来也是兼容的。

前端api和后端api 是否需要一个api层 这是对外输出。从整个项目的的高度来看，是不需要的。因为整个项目和系统就是计算/处理和输出啊 内部有内部的调用。外部就是通过api。

那前后台的api以及多个端的api怎么解决这个问题？ 这个我觉得区分一下路由和验证jwt就好了。

那模块问题呢。比如后台的实时产品和实时库存。  首先把后台当成是一个端就好了。在路由那里区分不同的端。要看实时的产品，那就封装不同的获取产品的方法。和不同的获取库存的方法。

核心模块呢？其实就是公共模块。名字不一样而已

那产品可以做一个模块吗？库存可以，商品（产品）可以做一个模块。但是商城我感觉不能。

店铺可以做一个模块吗？我觉得不能，这个只是一个集合，类似于购物车。 店铺包括装修，上下架的管理和产品的管理。库存的管理。店铺只能算是一个端。是专门给商家开通的一个端。

那消费者看到的店铺呢。比如商家信息。可以从user相关查询。包括商家的产品和售卖情况。这里面的商家就是一个实体。不同于普通用户的实体。类似于公司。如果要区分普通用户和集合性质的用户，要看表设计了。 这个可能可以分到 独立体用户模块。

从上看，应该怎么分模块？抽象体适合做模块。业务反而不适合。比如产品是抽象的产品。user也是抽象的user  那么这个导入导出应该归类到哪个模块？公共模块。

从下看，什么时候应该加模块？在功能无法归类的时候，抽象出来一个模块去新增。

现在分了服务器分了项目，会影响分模块的原则吗？不影响，只不过业务场景变了。是自上而下变的。那么应该怎么处理？首先看这个项目，目前主要是计算。那么也是不影响分模块的规则的。专门用于计算是什么？是耗时比较长（队列）以及统计类的吗，也许是吧。



分销可以（分佣）。


但是比如获取产品信息 怎么处理？这个还涉及到接口的验证。接口验证放在验证那里做就好了。问题有点偏了。我觉得涉及到路由。也应该从底层考虑。因为路由是跟着业务需求走的。但是所有的开发，不应该跟着业务走，而是应该跟着软件开发的公认好的规则走。开发只是跟着不同的业务需求，输出了不同的方案而已。那么路由这块也就是跟着clean code走了 

工具类：我的理解就应该放在公共模块。如果以后想要将这个工具类在别的项目也能用，或者提供微服务这种的。比如导出 二维码的生成。我觉得首先要封装成为一个类，因为可以这个工具有替代品。
像trait这种东西，是一个模块内的使用就好了（本质就是继承）。

自己封装的一些类似于字符串的处理，我觉得就是公用方法。辅助函数嘛。  辅助函数的整理这里不展开了。

图片保存时的域名和路径关系：
域名不带/ 如： http://www.image.com
路径：带/ 如： /upload/1.png
解析时。先获取域名，并把最后的'/'字符去掉。然后确保路径前面带'/'。然后两者进行拼接返回